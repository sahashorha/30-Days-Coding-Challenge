Brute Force Approache
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> sum;
        for(int i =0;i<nums.size();i++){
            for(int j =1;j<nums.size();j++){
                if(i==j)
                    continue;
                if((nums[i]+nums[j])==target){
                    sum.push_back(i);
                    sum.push_back(j);
                    break;
                    
                }
                
            }
        }
        for(int i=0;i<sum.size();i++){
             if(sum.size()>2){
                 sum.pop_back();
            }
        }
       
        return sum;
    }
};


2.HashMap with two passes

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        //
        unordered_map<int,int>mp;
        for(int i=0;i<nums.size();i++){
            if(mp.find(target-nums[i])==mp.end()){
                mp[nums[i]]=i;
            }
            else{
                return {mp[target-nums[i]],i};
            }
        }
        return {-1,-1};
    }
};

3. HashMap with one passes

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
        unordered_map<int,int>mp;
        for(int i=0;i<nums.size();i++){
            int comp = target-nums[i];
            if(mp.count(comp)){
                return {mp[comp],i};
            }
            mp[nums[i]]=i;
        }
        return {-1,-1};
    }
};
