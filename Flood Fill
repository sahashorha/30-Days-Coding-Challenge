Using DFS 
class Solution {
public:
    void dfs(vector<vector<int>>& image,int i , int j,int oldcolor,int color){
        int row = image.size();
        
        int col = image[0].size();
        if(i<0 || i>=row || j<0 || j>=col|| image[i][j]!= oldcolor){
            return;
        }
        image[i][j] = color;
        dfs(image,i+1,j,oldcolor,color);
        dfs(image,i-1,j,oldcolor,color);
        dfs(image,i,j+1,oldcolor,color);
        dfs(image,i,j-1,oldcolor,color);
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        // knowing the old color present
        int oldcolor = image[sr][sc];
        if(oldcolor == color){
            return image;
        }
        // call the dfs function ...
        dfs(image,sr,sc,oldcolor,color);
        return image;
    }
};
Time Complexity = O(mn);
