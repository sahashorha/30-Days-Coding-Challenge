class Solution {
public:
    void combination(vector<int>& candidates, int target,
     vector<int> &currComb,int currSum,int currIndex,vector<vector<int>> &ans){
         if(currSum>target) return;//backtrack from here
         if(currSum == target) {ans.push_back(currComb);return;}//store the combination and backtrack
         for(int i = currIndex; i<candidates.size();i++){
             currComb.push_back(candidates[i]);//put one option in the combination
             currSum+= candidates[i];//add in the currsum and comparing with target
             combination(candidates,target,currComb,currSum, i,ans);//call in index
             currComb.pop_back();//when backtrack than pop the element 
             currSum-= candidates[i];//decrement the currsum 

         }
     }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> currComb;
        combination(candidates,target,currComb,0,0,ans);
        return ans;
    }
};
