By two pointer approach 
class Solution {
public:
    // function for check string is valid or not
    bool valid(char ch){
        if((ch>='A' && ch<= 'Z')||(ch>='a' && ch<= 'z')||(ch>='0' && ch<= '9')){
            return 1;
        }
        else{
            return 0;
        }
    }
    // function to convert into lower case
    char lowercase(char ch){
        if((ch>='a' && ch<= 'z')||(ch>='0' && ch<= '9')){
            return ch;
        }
        else{
            char temp = ch - 'A'+'a';
            return temp;
        }
    }
    // check pallindrome
    bool checkPallindrome(string st){
        int s =0;
        int e = st.size()-1;
        while(s<=e){
            if(st[s]!=st[e]){
                return 0;
            }
            else{
                s++;
                e--;
            }
        }
        return 1;
    }
    bool isPalindrome(string s) {
        string temp = "";
        for(int i =0;i<s.size();i++){
            if(valid(s[i])){
                temp.push_back(s[i]);
            }
        }
        for(int i=0;i<temp.size();i++){
            temp[i]= lowercase(temp[i]);
        }
        return checkPallindrome(temp);
    }
};
time complexity = O(n)
space complexity = O(1)
