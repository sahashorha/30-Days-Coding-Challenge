/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int dfsHeight(TreeNode *root){
        // if root is equals to null return 0;
        if(root == NULL) return 0;
        // first find out the left height 
        int leftheight = dfsHeight(root -> left);
        // if it returns equals to -1 then return -1
        if(leftheight==-1) return -1;
        // same as leftheight
        int rightheight = dfsHeight(root -> right);
        // same as rightheight 
        if(rightheight==-1) return -1;
        // if the difference of hight is greater than one 
        if(abs(leftheight-rightheight )> 1) return -1;
        // max means height of the tree
        return max(leftheight ,rightheight) + 1;
    }
    bool isBalanced(TreeNode* root) {
        return dfsHeight(root) != -1;
    }
};
