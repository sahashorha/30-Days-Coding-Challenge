class Solution {
public:
bool dfs(int src, vector<bool>&vis, vector<bool>&currvisit,vector<int> adj[]){
    vis[src] = 1;
    currvisit[src] =1;
    for(auto it : adj[src]){
        if(!vis[it]){
            if(dfs(it,vis,currvisit,adj)) return true;
        }
        else if(vis[it] && currvisit[it]) return true;
    }
    currvisit[src] =0;
    return false;
}
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
       int n = numCourses;
       vector<bool> visited(n,false) , currVisited(n,false);
       vector<int>adj[n];
       for(auto x : prerequisites){
           vector<int> data = x;
           int a = data[0];
           int b = data[1];
           adj[a].push_back(b);
       }
       for(int i =0;i<n;i++){
           if(!visited[i]){
               if(dfs(i,visited,currVisited,adj)){
                   return false;
               }
           }
       }
       return true;

    }
};
