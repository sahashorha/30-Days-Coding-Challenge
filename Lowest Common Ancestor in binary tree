/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        // if root equals to null then return null
        if(root == NULL){
            return NULL;
        }
        if(root == p or root == q){
            return root;
        }
        TreeNode* left = lowestCommonAncestor(root -> left,p,q);
        TreeNode* right = lowestCommonAncestor(root -> right , p,q);
        if(left != NULL and right != NULL) return root;
        else if(left == NULL and right != NULL) return right;
        else if(right == NULL and left != NULL) return left;
        else return NULL;
        // Approace
        // 1.first find p and q with ancestor 
        // 2.If found return root;
        // 3.If any non null return root;
        // 4.If both are non null return root;
        // time complexity = O(n);
        // Space Complexity = O(n);

    }
};
