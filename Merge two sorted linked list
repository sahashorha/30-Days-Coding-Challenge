Two Approaches 
1. Iterative Approache
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode* DummyNode = new ListNode(-1);
        ListNode* list3 = DummyNode;
        while(list1 != NULL && list2 != NULL){
            if(list1-> val<list2 -> val){
                list3 -> next = list1 ;
                list1 = list1 -> next;
            }
            else{
                list3 -> next = list2;
                list2 = list2 -> next;
            }
            list3 = list3 -> next;
        }
        while(list1 != NULL){
            list3 -> next = list1;
            list1 = list1 -> next;
            list3 = list3-> next;
        }
            while(list2 != NULL){
            list3 -> next = list2;
            list2 = list2 -> next;
            list3 = list3-> next;
        }
        return DummyNode -> next;
    }
};


Time Complexity = O(M+N)
Space Complexity = O(1)
2. Recursive Approache

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode * result;
        if(list1 == NULL){
            return list2;
        }
        if(list2 == NULL ){
            return list1;
        }
        if(list1 ->val<list2 ->val){
            result  = list1;
            result -> next = mergeTwoLists(list1-> next,list2);
        }
        else{
            result = list2;
            result -> next = mergeTwoLists(list1,list2 -> next);
        }
        return result;
    }
};
Time Complexity = O(M+N)
Space Complexity = O(M+N) Due to auxilary space in recursion


