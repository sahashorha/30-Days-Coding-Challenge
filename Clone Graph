/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:

    void dfs(Node* node, Node* copy,vector<Node*>&vis){
        //copy the index in visited array
        vis[copy -> val] = copy;
        for(auto x : node -> neighbors){
            // if node is not visited in the array
            if(vis[x->val]==NULL){
                Node * newNode = new Node(x-> val);
                (copy -> neighbors).push_back(newNode);
                // call the dfs of x,newnode,and with visited array
                dfs(x,newNode,vis);
            }
            else{
                //just push the vector index to the copy of neighbors
                (copy -> neighbors).push_back(vis[x-> val]);
            }
        }
    }
    Node* cloneGraph(Node* node) {
        //if node is equal to null then return null
        if(node == NULL) return NULL;
        //visted array 
        vector<Node*> vis(1000,NULL);
        Node* copy = new Node(node -> val);
        dfs(node,copy,vis);
        return copy;
        
    }
};
